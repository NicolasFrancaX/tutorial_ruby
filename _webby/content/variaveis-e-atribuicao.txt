---
title:      Variáveis e atribuição
created_at: 2009-05-24 19:29:50.945539 -03:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

Para armazenar um número ou string na memória de seu computador para usar posteriormente em seu programa, você precisa dar um nome para esse número ou string. Programadores frequentemente referem-se a esse processo como atribuição e chamam os nomes de variáveis. Uma variável começa a existir assim que o interpretador vê uma atribuição para essa variável.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
s = 'Olá Mundo!'
x = 10
<% end -%>

&nbsp;

<div class='box'>
Uma bareword é qualquer combinação de letras, números e underscores, e não é qualificada por nenhum símbolo (Referência: "http://alumnus.caltech.edu/~svhwan/prodScript/avoidBarewords.html":http://alumnus.caltech.edu/~svhwan/prodScript/avoidBarewords.html). Variáveis locais e barewords parecem similares; elas devem iniciar com underscore (_) ou uma letra minúscula, e elas devem consistir inteiramente de letras, números e underscores. Lembre-se, referências a variáveis locais parecem com invocações de métodos e palavras chaves não podem ser usadas como nomes de variáveis (locais).

Chamadas a métodos também podem ser barewords, como em meu_metodo. *gets* é uma chamada a um método; assim como *system*. Seja lá onde o Ruby vê uma bareword, ele interpreta-a como uma entre três coisas: (a) Se existe um sinal de igual do lado direito da bareword, ela é uma variável local sofrendo uma atribuição. (b) Ruby tem uma lista interna de palavras chaves e uma bareword pode ser uma delas. (c) Se uma bareword não é (a) ou (b), ela é assumida como sendo uma chamada a método. Se não existe nenhum método com esse nome, Ruby lança um *NameError*.
</div>

O programa *p004usodestring.rb* mostra-nos mais algumas formas de uso de strings.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p004usodestring.rb
# Definindo uma constante  
PI = 3.1416  
puts PI  
# Definindo uma variável local  
minhaString = 'Eu amo minha cidade'  
puts minhaString  
=begin  
  Conversões
  .to_i, .to_f, .to_s  
=end  
var1 = 5;  
var2 = '2'  
puts var1 + var2.to_i  
# << juntando a uma string
a = 'Olá '  
a<<'mundo. 
Eu amo esse mundo...'  
puts a  
=begin 
  << marca o início de seu literal string e
  é seguido por um delimitador de sua escolha.
  O literal string inicia então na próxima linha
  e termina quando o delimitador é repetido em
  uma linha onde ele aparece sozinho.
  Isso é conhecido como "Here document syntax".
=end  
a = <<FIM_STR  
Essa é a string  
E uma segunda linha  
FIM_STR  
puts a
<% end -%>

&nbsp;

<div class='box'>
No exemplo:
x = "200.0".to_f
o ponto significa que a mensagem "to_f" está sendo enviada para a string "200.0", ou que o método to_f está sendo chamado na string "200.0". A string "200.0" é chamada de receptor da mensagem. Assim, quando você vê um ponto nesse contexto, você deveria interpretar-lo como uma mensagem (à direita) sendo enviada para um objeto (à esquerda).
</div>

h2. Sumário

Eu listei todos os "pontos importantes":sumario-ruby1.html que você precisa lembrar depois de ter completado os seguintes tópicos: "Introdução":introducao.html, "Instalação":instalacao.html, "Primeiro programa Ruby":primeiro-programa-ruby.html, "Características":caracteristicas.html, "Números em Ruby":numeros-em-ruby.html, "Diversão com strings":diversao-com-strings.html e "Variáveis e atribuição":variaveis-e-atribuicao.html.
