---
title:      Procs em Ruby
created_at: 2010-04-24 17:40:01.610313 -03:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

_Blocos não são objetos_, mas eles podem ser convertidos em objetos da classe *Proc*. Podemos fazer isso chamando o método *lambda*, presente no módulo *Kernel* do Ruby. Um bloco criado com *lambda* atua como um método Ruby. Caso você não especifique o número correto de argumentos, você não pode chamar o bloco.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
prc = lambda {"hello"}
<% end %>

Objetos *Proc* são blocos de código que são vinculados a um grupo de variáveis locais. A classe *Proc* tem uma chamada de método que invoca o bloco. O programa *p024proccall.rb* ilustra isso.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# Blocos não são objetos
# eles podem ser convertidos em objetos da classe Proc,
# chamando o método lambda
prc = lambda {puts 'Olá'}
# o método call chama o bloco
prc.call

# outro exemplo
brinde = lambda do
  puts 'Viva'
end
brinde.call
<% end %>

A saída deste código é:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
>ruby p024proccall.rb
Olá
Viva
>Exit code: 0
<% end %>

Se você chamar o método _class_ do objeto prc, você verá que ele pertence a classe *Proc*, como podemos ver no exemplo abaixo:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
prc = lambda {puts 'Hello'}
puts prc.class
#a saída será Proc
<% end %>

Lembre-se que você não pode passar métodos dentro de outros métodos (mas você pode passar procs dentro dos métodos), e métodos não podem retornar outros métodos (mas eles podem retornar procs).

O próximo exemplo mostra como _os métodos podem usar procs_. Exemplo *p025mtdproc.rb*

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
=begin
  Você não pode passar métodos dentro de outros métodos
  (mas pode passar procs dentro dos métodos),
  e métodos não podem retornar outros métodos (mas eles podem retornar procs)
=end

def algum_metodo algum_proc
  puts 'Início do método'
  algum_proc.call
  puts 'Fim do método'
end

fale = lambda do
  puts 'Olá'
end

algum_metodo fale
<% end %>

A saída do exemplo será:

<% coderay(:lang => "text", :line_numbers => "inline") do -%>
>ruby p025mtdproc.rb
Início do método
Olá
Fim do método
>Exit code: 0
<% end %>

Aqui está outro exemplo da passagem de argumentos usando *lambda*.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
umBloco = lambda { |x| puts x }
umBloco.call 'Olá Mundo!'
# a saída será: Olá Mundo!
<% end %>

<div class='box'>
*Fabio Akita*, grande entusiasta do Rails e Ruby, também conhecido online como "AkitaOnRails", escreveu um excelente artigo sobre "Closures/Blocos em Ruby (em inglês)":http://rubylearning.com/blog/2007/11/30/akitaonrails-on-anatomy-of-ruby-blocksclosures/ para os membros do _rubylearning.com_, que também foi publicado em português no seu "blog":http://akitaonrails.com/2007/11/30/anatomia-de-ruby-blocks-closures. Se você quiser saber mais sobre blocos em Ruby, esse artigo poderá te ajudar em muito.

Outro artigo recomendado é o do "Daniel Lopes":http://blog.areacriacoes.com.br/2008/9/22/blocos, que explica de uma forma bem didática o conceito e uso de blocos.

</div>

